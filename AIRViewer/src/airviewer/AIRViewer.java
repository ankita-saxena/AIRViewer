/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *@author Erik M. Buck
 */
package airviewer;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

/**
 * This is the main application class. It was originally generated by the
 * NetBeans default JavaFx FXML project template. Methods for parsing the
 * command line and command scripts were added.
 *
 * The over-aching application design follows the Model-View-Controller Design
 * Pattern. If the application is started with command line arguments, this
 * class uses the arguments to load a Model and then processes commands that
 * apply to (mutate) the Model directly. Otherwise, this class loads the View
 * and Controller subsystem from a JavaFx fxml file and then passes control to
 * the Controller which may in turn may load the Model.
 *
 * @author Erik M. Buck (Reviewed by Ankita Saxena
 */
public final class AIRViewer extends Application {

    /**
     * A three group regular expression used to parse command scripts in
     * runScript().
     */
    private static final String REGEX = "\"([^\"]*)\"|([^\\s#]+)|([#]+.*)";

    /**
     * A compiled version of REGEX used to parse command scripts in runScript().
     */
    private static final Pattern PATTERN = Pattern.compile(REGEX);

    /**
     * This override of the JavaFx start() Template Method loads resources from
     * an fxml file, shows a document window, and then asks the controller
     * specified in the resources to prompt the user to load a model.
     *
     * @param stage The primary stage on which JavaFx Nodes will play
     * @throws Exception Any exception thrown indicates unrecoverable error.
     */
    @Override
    public void start(Stage stage) throws Exception {
        assert stage !=null;
    	FXMLLoader loader = new FXMLLoader(getClass().getResource("AIRFXMLDocument.fxml"));
        Parent root = (Parent) loader.load();
        Scene scene = new Scene(root);
        stage.setScene(scene);
        AIRViewerController controller = (AIRViewerController) loader.getController();
        stage.show();
        controller.promptUserToLoadModel();
    }

    /**
     * This override of the JavaFx stop() Template Method outputs "Stage is
     * closing". Todo: Implement detection of dirty/edited model and prompt the
     * user to save before stopping.
     */
    @Override
    public void stop() {
        System.out.println("Stage is closing");
        // Todo: Save file if document has been edited since last save
    }

    /**
     * This function executes the commands in the file with file system path
     * stored in args[0] and applies the commands to a PDF file with file system
     * path stored in args[1]. If either the path to the script cannot be read
     * or the path to the PDF file cannot be read, IOException is thrown. If the
     * PDF file is not a valid PDF file, error messages are reported to
     * System.err. Commands that are executed are echoed to System.out. Commands
     * that fail may or may not report errors to System.err depending on the
     * command.
     *
     * @param args A String array containing exactly two strings interpreted as
     * a file system path to a script file and a fille system path to a valid
     * PDF file respectively.
     * @throws IOException If either file cannot be read
     */
    private static void runScript(String[] args) throws IOException {
        assert null != args && 2 == args.length;

        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(args[0]), Charset.defaultCharset()))) {
            DocumentCommandWrapper commandDocument = DocumentCommandWrapper.loadDocumentAtPath(args[1]);
            String line;
            while ((line = br.readLine()) != null) {
                System.out.println(line); // echo the input

                Matcher m = PATTERN.matcher(line);
                ArrayList<String> commandAndArgs = new ArrayList<>();
                while (m.find()) {
                    if (m.group(1) != null) {
                        commandAndArgs.add(m.group(1));
                    } else if (m.group(3) != null) {
                        // This is a comment: ignore it
                    } else {
                        commandAndArgs.add(m.group(2));
                    }
                }

                if (0 < commandAndArgs.size()) {
                    String[] commandAndArgsArray = commandAndArgs.toArray(new String[commandAndArgs.size()]);
                    commandDocument.executeDocumentCommandWithNameAndArgs(commandAndArgsArray[0],
                            Arrays.copyOfRange(commandAndArgsArray, 1, commandAndArgsArray.length));
                }
            }
        }
    }

    /**
     * This function parses the command line arguments and invokes operations
     * based on the arguments. Calling this function with no arguments or
     * incorrect arguments results in the function outputting usage information
     * and then calls System.exit(-1). Otherwise, this function attempts to run
     * the scripts specified via command line arguments and then calls
     * System.exit(0).
     *
     * In the most general case, two command line arguments are provided:
     * \<pathToScript\> \<pathToPDF_File\>
     * pathToScript should be a file system path to a file containing ASCII text
     * specifying one command per line. A command is composed of space delimited
     * strings. The first string is the name of a command. All other strings on
     * the same line are arguments to the command. Strings within " " may
     * contain spaces and are still treated as a single string argument.
     * pathToPDF_File should be a file system path to a valid PDF file to which
     * commands in pathToScript will be applied.
     *
     * @param args Arguments provided on the command line.
     */
    public static void commandLineMain(String[] args) {
        if (2 == args.length) {
            try {
                runScript(args);
            } catch (IOException ex) {
                System.err.println("Unable to run script: <" + args[0] + ">");
                Logger.getLogger(AIRViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.err.println(
                    "<Usage: pathToScript pathToPDF_File>");
            System.err.println(
                    "\tApply the commands in pathToScript to pathToPDF_File. Commands may include, save, AddBoxAnnotation, Undo, Redo, etc.");
            System.err.println(
                    "\n\t- OR -\n");
            System.err.println(
                    "<Usage: -h>");
            System.err.println(
                    "\tOutput a list of annotation commands and descriptions.");
            System.err.println(
                    "\n\t- OR -\n");
            System.err.println(
                    "<Usage: -t pathToPDF_File>");
            System.err.println(
                    "\tAnnotate pathToPDF_File with bult-in test cases and save to a similar file path with a '~' appended.");
            System.exit(-1); // Intended exit with error return
        }

        System.exit(0); // Intended exit with error return
    }

    /**
     * This is the entry point for the program. If command line arguments are
     * present, this method calls commandLineMain(args) to process the command
     * line. Otherwise, this method calls launch(args) to begin a JavaFx
     * interactive graphical user interface.
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {
    	assert args.length > 0;
        if (0 != args.length) {
            commandLineMain(args);
        } else {
            launch(args);
        }
    }
}